/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package P2.view;

import P2.model.GestorFiltros;
import P2.controller.Palanca;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Fran
 */
public class GUISalpicadero2 extends javax.swing.JApplet {
    /**
     * Creates new form GUISalpicadero2
     */
    public GUISalpicadero2() {
        this.almacenada = 0.0;
        this.gestor = new GestorFiltros();
        this.gestor.run();
        this.palanca = new Palanca();
        this.palanca.addObserver(this.gestor.salpicadero);
    }
    
    public void setAlmacenada(double d) {
        this.almacenada = d;
    }
    
    public double getAlmacenada() {
        return this.almacenada;
    }
    
    /**
     * Initializes the applet GUISalpicadero2
     */
    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUISalpicadero2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUISalpicadero2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUISalpicadero2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUISalpicadero2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the applet */
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                public void run() { 
                    resize(900, 665);
                    initComponents();
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radial4Lcd1 = new eu.hansolo.steelseries.gauges.Radial4Lcd();
        jToggleButton1 = new javax.swing.JToggleButton();
        displayCircular1 = new eu.hansolo.steelseries.gauges.DisplayCircular();
        jToggleButton2 = new javax.swing.JToggleButton();
        radial1Vertical1 = new eu.hansolo.steelseries.gauges.Radial1Vertical();
        displayMulti1 = new eu.hansolo.steelseries.gauges.DisplayMulti();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        jToggleButton5 = new javax.swing.JToggleButton();
        jToggleButton6 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        displayCircular2 = new eu.hansolo.steelseries.gauges.DisplayCircular();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setMinimumSize(new java.awt.Dimension(1000, 1000));
        setPreferredSize(new java.awt.Dimension(1000, 1000));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        radial4Lcd1.setLcdDecimals(1);
        radial4Lcd1.setLcdUnitString("km/h");
        radial4Lcd1.setLcdUnitStringVisible(true);
        radial4Lcd1.setMaxValue(200.0);
        radial4Lcd1.setMinimumSize(new java.awt.Dimension(200, 200));
        radial4Lcd1.setThresholdVisible(true);
        radial4Lcd1.setTickLabelPeriod(20);
        radial4Lcd1.setTitle("Velocímetro");
        radial4Lcd1.setUnitString("km/h");
        getContentPane().add(radial4Lcd1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 280, 280));

        jToggleButton1.setText("ARRANCAR");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 160, 130, 40));

        displayCircular1.setUnitString("km   ");
        getContentPane().add(displayCircular1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 310, 150, 150));

        jToggleButton2.setText("PISAR FRENO");
        jToggleButton2.setEnabled(false);
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 210, 130, 40));

        radial1Vertical1.setTitle("Depósito");
        radial1Vertical1.setUnitString("Litros");
        getContentPane().add(radial1Vertical1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, -1, -1));

        displayMulti1.setUnitString("RPM x1000");

        javax.swing.GroupLayout displayMulti1Layout = new javax.swing.GroupLayout(displayMulti1);
        displayMulti1.setLayout(displayMulti1Layout);
        displayMulti1Layout.setHorizontalGroup(
            displayMulti1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 215, Short.MAX_VALUE)
        );
        displayMulti1Layout.setVerticalGroup(
            displayMulti1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(displayMulti1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 470, 215, -1));

        jToggleButton3.setText("PARAR");
        jToggleButton3.setEnabled(false);
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 370, -1, -1));

        jToggleButton4.setText("ACELERAR");
        jToggleButton4.setEnabled(false);
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 300, -1, -1));

        jToggleButton5.setText("MANTENER");
        jToggleButton5.setBorderPainted(false);
        jToggleButton5.setEnabled(false);
        jToggleButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 370, -1, -1));

        jToggleButton6.setText("REINICIAR");
        jToggleButton6.setBorderPainted(false);
        jToggleButton6.setEnabled(false);
        jToggleButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 430, -1, -1));

        jLabel1.setText("Velocidad Almacenada");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 50, -1, 20));

        jTextField2.setEnabled(false);
        getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 80, 80, -1));

        jLabel2.setText("km/h");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 80, -1, -1));

        jLabel3.setBackground(new java.awt.Color(1, 1, 1));
        jLabel3.setForeground(new java.awt.Color(1, 1, 1));
        jLabel3.setText("jLabel3");
        jLabel3.setOpaque(true);
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 370, 20, 20));

        jLabel4.setBackground(new java.awt.Color(232, 190, 159));
        jLabel4.setForeground(new java.awt.Color(232, 190, 159));
        jLabel4.setText("jLabel4");
        jLabel4.setOpaque(true);
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 360, 120, 40));

        jLabel5.setBackground(new java.awt.Color(232, 190, 159));
        jLabel5.setForeground(new java.awt.Color(232, 190, 159));
        jLabel5.setText("jLabel5");
        jLabel5.setOpaque(true);
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 330, 60, 100));

        displayCircular2.setUnitString("km");
        getContentPane().add(displayCircular2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 310, 150, 150));

        jButton1.setText("REPOSTAR");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 490, -1, -1));

        jLabel6.setText("Notificaciones");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 490, -1, -1));

        jButton2.setText("ACEITE");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 620, -1, -1));

        jButton3.setText("FRENOS");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 620, -1, -1));

        jButton4.setText("REVISIÓN");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 620, -1, -1));

        jTextPane1.setDisabledTextColor(new java.awt.Color(255, 0, 0));
        jTextPane1.setEnabled(false);
        jScrollPane3.setViewportView(jTextPane1);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 510, 290, 100));
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        new Thread(){
            public void run() {
                /* Si está seleccionado, podemos seleccionar el resto */
                if(jToggleButton1.isSelected()) {
                    if(gestor.getState() == Thread.State.RUNNABLE) {
                        ((Thread)gestor).start();
                    }

                    /* Inicializamos la velocidad almacenada a 0 */
                    setAlmacenada(0.0);
                    jTextField2.setText(String.valueOf(almacenada));

                    jToggleButton1.setText("APAGAR");

                    /* Cambiamos el dibujo de la palanca */
                    jLabel3.setLocation(640, 370);

                    /* Ponemos la cantidad de combustible */
                    radial1Vertical1.setValue(gestor.salpicadero.getCombustible());

                    /* Activamos el resto de botones */
                    jToggleButton2.setEnabled(true);
                    jToggleButton4.setEnabled(true);

                    /* Encendemos el led */
                    radial4Lcd1.setLedBlinking(true);
                }

                /* Si no está seleccionado, decrementamos la velocidad según el rozamiento y el resto de botones dejan de ser seleccionables */
                else {
                    jToggleButton1.setText("ARRANCAR");

                    jToggleButton2.setEnabled(false);
                    jToggleButton2.setSelected(false);
                    jToggleButton3.setEnabled(false);
                    jToggleButton3.setSelected(false);
                    jToggleButton4.setEnabled(false);
                    jToggleButton4.setSelected(false);
                    jToggleButton5.setEnabled(false);
                    jToggleButton5.setSelected(false);
                    jToggleButton6.setEnabled(false);
                    jToggleButton6.setSelected(false);

                    /* Apagamos el led */
                    radial4Lcd1.setLedBlinking(false);
                }
                
                while(true) {
                    if(!jToggleButton1.isSelected()) {
                        palanca.setEstado(0);
                        gestor.peticionFiltros(-1);

                        /* Para el cuentakilómetros */
                        double kilometrosTotal = Math.round(gestor.salpicadero.getDistanciaTotal() * 100.0) / 100.0;
                        displayCircular1.setValue(kilometrosTotal);
                        displayCircular1.repaint();
                        gestor.salpicadero.setDistancia(0.0);
                        displayCircular2.setValue(0.0);
                        displayCircular2.repaint();

                        /* Para el velocímetro */
                        double redondeada = Math.round(gestor.salpicadero.getVelocidad() * 100.0) / 100.0;
                        radial4Lcd1.setValue(redondeada);
                        radial4Lcd1.repaint();

                        /* Para el cuentarrevoluciones */
                        double revoluciones = Math.round(gestor.salpicadero.getRevoluciones() * 100.0) / 100.0;
                        displayMulti1.setValue(revoluciones);
                        displayMulti1.repaint();
                        
                        /* Gestión  del botón de repostar */
                        double gasolina = Math.round(gestor.salpicadero.getCombustible() * 100.0) / 100.0;
                        
                        if(gasolina < 100.0 && redondeada == 0.0) {
                            jButton1.setEnabled(true);
                        }
                    }
                    
                    else if(jToggleButton1.isSelected() && !jToggleButton4.isSelected() && !jToggleButton5.isSelected() && !jToggleButton6.isSelected()){
                        palanca.setEstado(0);
                        gestor.peticionFiltros(-1);

                        double kilometrosParcial = Math.round(gestor.salpicadero.getDistancia() * 100.0) / 100.0;
                        double kilometrosTotal = Math.round(gestor.salpicadero.getDistanciaTotal() * 100.0) / 100.0;
                        displayCircular1.setValue(kilometrosTotal);
                        displayCircular1.repaint();
                        displayCircular2.setValue(kilometrosParcial);
                        displayCircular2.repaint();

                        /* Para el velocímetro */
                        double redondeada = Math.round(gestor.salpicadero.getVelocidad() * 100.0) / 100.0;
                        radial4Lcd1.setValue(redondeada);
                        radial4Lcd1.repaint();

                        /* Para el cuentarrevoluciones */
                        double revoluciones = Math.round(gestor.salpicadero.getRevoluciones() * 100.0) / 100.0;
                        displayMulti1.setValue(revoluciones);
                        displayMulti1.repaint();
                        
                        /* Gestión del botón de repostar */
                        jButton1.setEnabled(false);
                    }    
                    
                    /* Si necesitamos cambiar el aceite */
                    if(gestor.salpicadero.getMonitor().getAceite() >= gestor.salpicadero.getMonitor().notificacionAceite){
                        /* Ponemos la notificación en el cuadro */
                        jTextPane1.setText("¡Se necesita cambiar el aceite! Por favor, pare el vehículo");
                    }
                    
                    /* Activamos el botón cuando la velocidad sea 0.0 */
                    if(gestor.salpicadero.getVelocidad() == 0.0 && !jToggleButton1.isSelected() && gestor.salpicadero.getMonitor().getAceite() > 0.0) {
                        jButton2.setEnabled(true);
                        jButton3.setEnabled(true);
                        jButton4.setEnabled(true);
                    }

                    /* Si necesitamos cambiar los frenos */
                    if(gestor.salpicadero.getMonitor().getFrenos() >= gestor.salpicadero.getMonitor().notificacionFrenos) {
                        /* Ponemos la notificación en el cuadro */
                        jTextPane1.setText("¡Se necesita cambiar los frenos! Por favor, pare el vehículo");
                    }

                    /* Si necesitamos revisión general */
                    if(gestor.salpicadero.getMonitor().getGeneral() >= gestor.salpicadero.getMonitor().notificacionRevisionGeneral) {
                        /* Ponemos la notificación en el cuadro */
                        jTextPane1.setText("¡Se necesita hacer una revisión general! Por favor, pare el vehículo");
                    }
                   
                    /* Pequeña espera para que tengan margen de actualizarse */
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(GUISalpicadero2.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }                   
            }
        }.start();
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        /* Pisar freno */
        if(jToggleButton1.isSelected()) {
            if(jToggleButton2.isSelected()) {
                palanca.setEstado(0);
                
                jToggleButton2.setText("SOLTAR FRENO");

                jToggleButton3.setSelected(false);
                jToggleButton3.setEnabled(false);
                jToggleButton4.setSelected(false);
                jToggleButton4.setEnabled(false);
                jToggleButton5.setSelected(false);
                jToggleButton5.setEnabled(false);
                jToggleButton6.setSelected(false);
                jToggleButton6.setEnabled(false);
                
                /* Cambiamos el dibujo de la palanca */
                jLabel3.setLocation(640, 370);
            }
            
            else {
                jToggleButton3.setSelected(true);
                jToggleButton4.setEnabled(true);
                
                if(getAlmacenada() != 0.0) {
                    jToggleButton6.setEnabled(true);
                }

                else {
                    jToggleButton6.setEnabled(false);
                }
                jToggleButton2.setText("PISAR FRENO");
            }
        }

        else {
            jToggleButton2.setText("PISAR FRENO");          
        }
        
        new Thread(){
            public void run(){
                while(true) {
                    if(jToggleButton2.isSelected()) {
                        palanca.setEstado(1);
                    
                        gestor.peticionFiltros(1);
                        
                        /* Ponemos la cantidad de combustible */
                        radial1Vertical1.setValue(gestor.salpicadero.getCombustible());
                        
                        /* Para los kilómetros */
                        double kilometrosParcial = Math.round(gestor.salpicadero.getDistancia() * 100.0) / 100.0;
                        double kilometrosTotal = Math.round(gestor.salpicadero.getDistanciaTotal() * 100.0) / 100.0;
                        displayCircular1.setValue(kilometrosTotal);
                        displayCircular1.repaint();
                        displayCircular2.setValue(kilometrosParcial);
                        displayCircular2.repaint();

                        /* Para el velocímetro */
                        double redondeada = Math.round(gestor.salpicadero.getVelocidad() * 100.0) / 100.0;
                        radial4Lcd1.setValue(redondeada);
                        radial4Lcd1.repaint();

                        /* Para el cuentarrevoluciones */
                        double revoluciones = Math.round(gestor.salpicadero.getRevoluciones() * 100.0) / 100.0;
                        displayMulti1.setValue(revoluciones);
                        displayMulti1.repaint();
                    }
                    
                    else if(!jToggleButton2.isSelected() && !jToggleButton4.isSelected() && !jToggleButton5.isSelected() && !jToggleButton6.isSelected()) {
                        jToggleButton3.setSelected(true);
                        
                        palanca.setEstado(0);
                    
                        gestor.peticionFiltros(-1);
                        
                        /* Ponemos la cantidad de combustible */
                        radial1Vertical1.setValue(gestor.salpicadero.getCombustible());
                        
                        /* Para los kilómetros */
                        double kilometrosParcial = Math.round(gestor.salpicadero.getDistancia() * 100.0) / 100.0;
                        double kilometrosTotal = Math.round(gestor.salpicadero.getDistanciaTotal() * 100.0) / 100.0;
                        displayCircular1.setValue(kilometrosTotal);
                        displayCircular1.repaint();
                        displayCircular2.setValue(kilometrosParcial);
                        displayCircular2.repaint();

                        /* Para el velocímetro */
                        double redondeada = Math.round(gestor.salpicadero.getVelocidad() * 100.0) / 100.0;
                        radial4Lcd1.setValue(redondeada);
                        radial4Lcd1.repaint();

                        /* Para el cuentarrevoluciones */
                        double revoluciones = Math.round(gestor.salpicadero.getRevoluciones() * 100.0) / 100.0;
                        displayMulti1.setValue(revoluciones);
                        displayMulti1.repaint();
                    }
                    
                    
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(GUISalpicadero2.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }.start();
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        /* Botón de parar */
        new Thread(){
            public void run(){
                while(jToggleButton3.isSelected()) {
                    /* Cuando está seleccionado el botón de frenar, solo podemos movernos a "Acelerar" */
                    
                    if(jToggleButton3.isSelected()) {
                        jToggleButton3.setEnabled(false);
                        jToggleButton4.setEnabled(true);
                        jToggleButton5.setSelected(false);
                        jToggleButton5.setEnabled(false);
                        jToggleButton6.setSelected(false);
                        
                        if(getAlmacenada() != 0.0) {
                            jToggleButton6.setEnabled(true);
                        }
                        
                        else {
                            jToggleButton6.setEnabled(false);
                        }                       
                    }

                    /* Cambiamos el dibujo de la palanca */
                    jLabel3.setLocation(640, 370);                    
                    
                    /* Cambiamos la palanca a estado "Frenando" */
                    palanca.setEstado(0);
                    
                    /* Aplicamos la opción de frenar a los filtros necesarios */
                    gestor.peticionFiltros(-1);
                    
                    /* Ponemos la cantidad de combustible */
                    radial1Vertical1.setValue(gestor.salpicadero.getCombustible());
                    
                    /* Para los kilómetros */
                    double kilometrosParcial = Math.round(gestor.salpicadero.getDistancia() * 100.0) / 100.0;
                    double kilometrosTotal = Math.round(gestor.salpicadero.getDistanciaTotal() * 100.0) / 100.0;
                    displayCircular1.setValue(kilometrosTotal);
                    displayCircular1.repaint();
                    displayCircular2.setValue(kilometrosParcial);
                    displayCircular2.repaint();

                    /* Para el velocímetro */
                    double redondeada = Math.round(gestor.salpicadero.getVelocidad() * 100.0) / 100.0;
                    radial4Lcd1.setValue(redondeada);
                    radial4Lcd1.repaint();

                    /* Para el cuentarrevoluciones */
                    double revoluciones = Math.round(gestor.salpicadero.getRevoluciones() * 100.0) / 100.0;
                    displayMulti1.setValue(revoluciones);
                    displayMulti1.repaint();
                    
                    /* Pequeña espera para que tengan margen de actualizarse */
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(GUISalpicadero2.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }.start();
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton4ActionPerformed
        /* Botón de acelerar */
        new Thread(){
            public void run(){
                while(jToggleButton4.isSelected()) {
                    /* Cuando está seleccionado el botón de acelerar, solo podemos movernos a "Mantener" */
                    if(jToggleButton4.isSelected()) {
                        jToggleButton3.setEnabled(false);
                        jToggleButton3.setSelected(false);
                        jToggleButton4.setEnabled(false);
                        jToggleButton5.setEnabled(true);
                        jToggleButton5.setSelected(false);
                        jToggleButton6.setEnabled(false);
                        jToggleButton6.setSelected(false);
                    }
                    
                    /* Cambiamos el dibujo de la palanca */
                    jLabel3.setLocation(680, 340);
                    
                    /* Cambiamos la palanca a estado "Acelerando" */
                    palanca.setEstado(1);
                    
                    /* Aplicamos la opción de acelerar a los filtros necesarios */
                    gestor.peticionFiltros(0);
                    
                    /* Ponemos la cantidad de combustible */
                    radial1Vertical1.setValue(gestor.salpicadero.getCombustible());
                    
                    /* Para los kilómetros */
                    double kilometrosParcial = Math.round(gestor.salpicadero.getDistancia() * 100.0) / 100.0;
                    double kilometrosTotal = Math.round(gestor.salpicadero.getDistanciaTotal() * 100.0) / 100.0;
                    displayCircular1.setValue(kilometrosTotal);
                    displayCircular1.repaint();
                    displayCircular2.setValue(kilometrosParcial);
                    displayCircular2.repaint();

                    /* Para el velocímetro */
                    double redondeada = Math.round(gestor.salpicadero.getVelocidad() * 100.0) / 100.0;
                    radial4Lcd1.setValue(redondeada);
                    radial4Lcd1.repaint();

                    /* Para el cuentarrevoluciones */
                    double revoluciones = Math.round(gestor.salpicadero.getRevoluciones() * 100.0) / 100.0;
                    displayMulti1.setValue(revoluciones);
                    displayMulti1.repaint();
                    
                    /* Pequeña espera para que tengan margen de actualizarse */
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(GUISalpicadero2.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }.start();
    }//GEN-LAST:event_jToggleButton4ActionPerformed

    private void jToggleButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton5ActionPerformed
        /* Botón de mantener */
        new Thread(){
            public void run(){
                while(jToggleButton5.isSelected()) {
                    /* Cuando está seleccionado el botón de mantener, solo podemos movernos a "Acelerar" o "Frenar" */
                    if(jToggleButton5.isSelected()) {
                        jToggleButton3.setEnabled(true);
                        jToggleButton4.setSelected(false);
                        jToggleButton4.setEnabled(true);
                        jToggleButton6.setEnabled(false);
                    }
                    
                    /* Cambiamos el dibujo de la palanca */
                    jLabel3.setLocation(720, 370);
                    
                    /* Cambiamos la palanca a estado "Mantener" */
                    palanca.setEstado(2);
                    
                    /* Aplicamos la opción de mantener a los filtros necesarios */
                    gestor.peticionFiltros(0);
                    
                    /* Ponemos la cantidad de combustible */
                    radial1Vertical1.setValue(gestor.salpicadero.getCombustible());
                    
                    /* Para los kilómetros */
                    double kilometrosParcial = Math.round(gestor.salpicadero.getDistancia() * 100.0) / 100.0;
                    double kilometrosTotal = Math.round(gestor.salpicadero.getDistanciaTotal() * 100.0) / 100.0;
                    displayCircular1.setValue(kilometrosTotal);
                    displayCircular1.repaint();
                    displayCircular2.setValue(kilometrosParcial);
                    displayCircular2.repaint();

                    /* Para el velocímetro */
                    double redondeada = Math.round(gestor.salpicadero.getVelocidad() * 100.0) / 100.0;
                    setAlmacenada(redondeada);
                    radial4Lcd1.setValue(redondeada);
                    radial4Lcd1.repaint();
                    jTextField2.setText(String.valueOf(redondeada));

                    /* Para el cuentarrevoluciones */
                    double revoluciones = Math.round(gestor.salpicadero.getRevoluciones() * 100.0) / 100.0;
                    displayMulti1.setValue(revoluciones);
                    displayMulti1.repaint();
                    
                    /* Pequeña espera para que tengan margen de actualizarse */
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(GUISalpicadero2.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }.start();
    }//GEN-LAST:event_jToggleButton5ActionPerformed

    private void jToggleButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton6ActionPerformed
        /* Botón de reiniciar */
        new Thread(){
            public void run(){
                while(jToggleButton6.isSelected()) {
                    /* Cuando está seleccionado el botón de mantener, solo podemos movernos a "Acelerar" o "Frenar" */
                    if(jToggleButton6.isSelected()) {
                        jToggleButton3.setEnabled(true);
                        jToggleButton3.setSelected(false);
                        jToggleButton4.setEnabled(false);
                        jToggleButton5.setEnabled(false);
                        jToggleButton6.setEnabled(false);
                    }
                    
                    /* Cambiamos el dibujo de la palanca */
                    jLabel3.setLocation(680, 400);
                    
                    /* Cambiamos la palanca a estado "Mantener" */
                    palanca.setEstado(3);
                    
                    /* Aplicamos la opción de reiniciar a los filtros necesarios */
                    gestor.peticionFiltros(0);
                    
                    /* Ponemos la cantidad de combustible */
                    radial1Vertical1.setValue(gestor.salpicadero.getCombustible());                   
                    
                    /* Para los kilómetros */
                    double kilometrosParcial = Math.round(gestor.salpicadero.getDistancia() * 100.0) / 100.0;
                    double kilometrosTotal = Math.round(gestor.salpicadero.getDistanciaTotal() * 100.0) / 100.0;
                    displayCircular1.setValue(kilometrosTotal);
                    displayCircular1.repaint();
                    displayCircular2.setValue(kilometrosParcial);
                    displayCircular2.repaint();

                    /* Para el velocímetro */
                    double redondeada = Math.round(gestor.salpicadero.getVelocidad() * 100.0) / 100.0;
                    radial4Lcd1.setValue(redondeada);
                    radial4Lcd1.repaint();

                    /* Para el cuentarrevoluciones */
                    double revoluciones = Math.round(gestor.salpicadero.getRevoluciones() * 100.0) / 100.0;
                    displayMulti1.setValue(revoluciones);
                    displayMulti1.repaint();
                    
                    /* Pequeña espera para que tengan margen de actualizarse */
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(GUISalpicadero2.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }.start();
    }//GEN-LAST:event_jToggleButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        gestor.salpicadero.repostar();
        radial1Vertical1.setValue(gestor.salpicadero.getCombustible());
        
        /* Esperamos a que se recargue el aceite */
        try {
            Thread.sleep(2500);
        } catch (InterruptedException ex) {
            Logger.getLogger(GUISalpicadero2.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        jTextPane1.setText("¡Listo! Depósito lleno. Puede continuar.");
        jButton1.setEnabled(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        /* Esperamos a que se recargue el aceite */
        gestor.salpicadero.getMonitor().cambioAceite();

        /* Esperamos a que se recargue el aceite */
        try {
            Thread.sleep(2500);
        } catch (InterruptedException ex) {
            Logger.getLogger(GUISalpicadero2.class.getName()).log(Level.SEVERE, null, ex);
        }

        jTextPane1.setText("¡Listo! Aceite cambiado. Puede continuar.");
        jButton2.setEnabled(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        /* Esperamos a que se cambien los frenos */
        gestor.salpicadero.getMonitor().cambioFrenos();

        /* Esperamos a que se recargue el aceite */
        try {
            Thread.sleep(2500);
        } catch (InterruptedException ex) {
            Logger.getLogger(GUISalpicadero2.class.getName()).log(Level.SEVERE, null, ex);
        }

        jTextPane1.setText("¡Listo! Frenos cambiados. Puede continuar.");
        jButton3.setEnabled(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        /* Esperamos a que se revise el coche */
        gestor.salpicadero.getMonitor().revisionGeneral();

        /* Esperamos a que se recargue el aceite */
        try {
            Thread.sleep(2500);
        } catch (InterruptedException ex) {
            Logger.getLogger(GUISalpicadero2.class.getName()).log(Level.SEVERE, null, ex);
        }

        jTextPane1.setText("¡Listo! Revisión completada. Puede continuar.");
        jButton4.setEnabled(false);
    }//GEN-LAST:event_jButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private eu.hansolo.steelseries.gauges.DisplayCircular displayCircular1;
    private eu.hansolo.steelseries.gauges.DisplayCircular displayCircular2;
    private eu.hansolo.steelseries.gauges.DisplayMulti displayMulti1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JToggleButton jToggleButton5;
    private javax.swing.JToggleButton jToggleButton6;
    private eu.hansolo.steelseries.gauges.Radial1Vertical radial1Vertical1;
    private eu.hansolo.steelseries.gauges.Radial4Lcd radial4Lcd1;
    // End of variables declaration//GEN-END:variables

    public static GestorFiltros gestor;
    private static Palanca palanca;
    private static double almacenada;
    private static boolean notificando = false;
}
